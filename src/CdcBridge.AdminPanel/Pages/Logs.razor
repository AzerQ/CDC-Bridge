@page "/logs"
@inject ILogsApi LogsApi
@inject ISnackbar Snackbar

<PageTitle>Logs - CDC Bridge Admin</PageTitle>

<MudText Typo="Typo.h3" Class="mb-4">Logs</MudText>

<MudCard Elevation="3" Class="mb-4">
    <MudCardContent>
        <MudGrid>
            <MudItem xs="12" md="3">
                <MudSelect @bind-Value="_filterLevel" Label="Level" Variant="Variant.Outlined" Clearable="true">
                    <MudSelectItem Value="@("Information")">Information</MudSelectItem>
                    <MudSelectItem Value="@("Warning")">Warning</MudSelectItem>
                    <MudSelectItem Value="@("Error")">Error</MudSelectItem>
                    <MudSelectItem Value="@("Debug")">Debug</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_filterMessage" Label="Search Message" Variant="Variant.Outlined" Clearable="true" />
            </MudItem>
            <MudItem xs="12" md="3" Class="d-flex align-center">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ApplyFilters" FullWidth="true">
                    <MudIcon Icon="@Icons.Material.Filled.Search" Class="mr-2" /> Search
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

@if (_loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
}
else if (_logs != null)
{
    <MudCard Elevation="3">
        <MudCardContent>
            <MudTable Items="@_logs.Items" Hover="true" Dense="true" Striped="true" Loading="@_loading">
                <HeaderContent>
                    <MudTh>Timestamp</MudTh>
                    <MudTh>Level</MudTh>
                    <MudTh>Message</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Timestamp">@context.Timestamp.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</MudTd>
                    <MudTd DataLabel="Level">
                        <MudChip Size="Size.Small" Color="GetLevelColor(context.Level)" T="string">
                            @context.Level
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="Message">
                        <MudText Typo="Typo.body2" Style="max-width: 600px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                            @context.Message
                        </MudText>
                    </MudTd>
                    <MudTd DataLabel="Actions">
                        <MudIconButton Icon="@Icons.Material.Filled.Info" Size="Size.Small" OnClick="@(() => ShowLogDetails(context))" />
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 25, 50, 100, 200 }" />
                </PagerContent>
            </MudTable>
        </MudCardContent>
        <MudCardActions>
            <MudPagination Count="@_logs.TotalPages" Selected="@_currentPage" SelectedChanged="OnPageChanged" Color="Color.Primary" />
        </MudCardActions>
    </MudCard>
}

<MudDialog @bind-Visible="_showDetailsDialog" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">Log Details</MudText>
    </TitleContent>
    <DialogContent>
        @if (_selectedLog != null)
        {
            <MudStack Spacing="3">
                <div>
                    <MudText Typo="Typo.subtitle2" Color="Color.Primary">Timestamp</MudText>
                    <MudText Typo="Typo.body2">@_selectedLog.Timestamp.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss.fff")</MudText>
                </div>
                <div>
                    <MudText Typo="Typo.subtitle2" Color="Color.Primary">Level</MudText>
                    <MudChip Size="Size.Small" Color="GetLevelColor(_selectedLog.Level)" T="string">@_selectedLog.Level</MudChip>
                </div>
                <div>
                    <MudText Typo="Typo.subtitle2" Color="Color.Primary">Message</MudText>
                    <MudText Typo="Typo.body2">@_selectedLog.Message</MudText>
                </div>
                @if (!string.IsNullOrEmpty(_selectedLog.Exception))
                {
                    <div>
                        <MudText Typo="Typo.subtitle2" Color="Color.Error">Exception</MudText>
                        <MudPaper Elevation="0" Class="pa-3" Style="background-color: #f5f5f5; max-height: 300px; overflow: auto;">
                            <MudText Typo="Typo.body2" Style="font-family: monospace; white-space: pre-wrap; font-size: 0.85rem;">@_selectedLog.Exception</MudText>
                        </MudPaper>
                    </div>
                }
                @if (!string.IsNullOrEmpty(_selectedLog.Properties))
                {
                    <div>
                        <MudText Typo="Typo.subtitle2" Color="Color.Primary">Properties</MudText>
                        <MudPaper Elevation="0" Class="pa-3" Style="background-color: #f5f5f5; max-height: 200px; overflow: auto;">
                            <MudText Typo="Typo.body2" Style="font-family: monospace; white-space: pre-wrap; font-size: 0.85rem;">@_selectedLog.Properties</MudText>
                        </MudPaper>
                    </div>
                }
            </MudStack>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => _showDetailsDialog = false)" Color="Color.Primary">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private PagedResultDto<LogEntryDto>? _logs;
    private bool _loading = true;
    private int _currentPage = 1;
    private int _pageSize = 100;
    
    private string? _filterLevel;
    private string? _filterMessage;

    private bool _showDetailsDialog = false;
    private LogEntryDto? _selectedLog;
    private DialogOptions _dialogOptions = new() { MaxWidth = MaxWidth.Large, FullWidth = true, CloseButton = true };

    protected override async Task OnInitializedAsync()
    {
        await LoadLogs();
    }

    private async Task LoadLogs()
    {
        _loading = true;
        try
        {
            var query = new LogQueryDto
            {
                Page = _currentPage,
                PageSize = _pageSize,
                Level = _filterLevel,
                MessageSearch = _filterMessage
            };
            
            _logs = await LogsApi.GetLogsAsync(query);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading logs: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task ApplyFilters()
    {
        _currentPage = 1;
        await LoadLogs();
    }

    private async Task OnPageChanged(int page)
    {
        _currentPage = page;
        await LoadLogs();
    }

    private void ShowLogDetails(LogEntryDto log)
    {
        _selectedLog = log;
        _showDetailsDialog = true;
    }

    private Color GetLevelColor(string level)
    {
        return level.ToLower() switch
        {
            "information" => Color.Info,
            "warning" => Color.Warning,
            "error" => Color.Error,
            "debug" => Color.Default,
            _ => Color.Default
        };
    }
}
