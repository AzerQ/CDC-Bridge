@page "/"
@inject IMetricsApi MetricsApi
@inject ISnackbar Snackbar

<PageTitle>Dashboard - CDC Bridge Admin</PageTitle>

<MudText Typo="Typo.h3" Class="mb-4">Dashboard</MudText>

@if (_loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
}
else if (_metrics != null)
{
    <MudGrid>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="3">
                <MudCardContent>
                    <div class="d-flex justify-space-between align-center">
                        <div>
                            <MudText Typo="Typo.body2" Color="Color.Default">Total Events</MudText>
                            <MudText Typo="Typo.h4">@_metrics.TotalBufferedEvents</MudText>
                        </div>
                        <MudIcon Icon="@Icons.Material.Filled.Event" Size="Size.Large" Color="Color.Primary" />
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="3">
                <MudCardContent>
                    <div class="d-flex justify-space-between align-center">
                        <div>
                            <MudText Typo="Typo.body2" Color="Color.Default">Pending</MudText>
                            <MudText Typo="Typo.h4">@_metrics.PendingEvents</MudText>
                        </div>
                        <MudIcon Icon="@Icons.Material.Filled.HourglassEmpty" Size="Size.Large" Color="Color.Warning" />
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="3">
                <MudCardContent>
                    <div class="d-flex justify-space-between align-center">
                        <div>
                            <MudText Typo="Typo.body2" Color="Color.Default">Successful</MudText>
                            <MudText Typo="Typo.h4">@_metrics.SuccessfulEvents</MudText>
                        </div>
                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Large" Color="Color.Success" />
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="3">
                <MudCardContent>
                    <div class="d-flex justify-space-between align-center">
                        <div>
                            <MudText Typo="Typo.body2" Color="Color.Default">Failed</MudText>
                            <MudText Typo="Typo.h4">@_metrics.FailedEvents</MudText>
                        </div>
                        <MudIcon Icon="@Icons.Material.Filled.Error" Size="Size.Large" Color="Color.Error" />
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>

        @if (_metrics.AverageDeliveryTimeMs.HasValue)
        {
            <MudItem xs="12" md="6">
                <MudCard Elevation="3">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Average Delivery Time</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.h4" Color="Color.Info">@($"{_metrics.AverageDeliveryTimeMs:F2} ms")</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }

        <MudItem xs="12">
            <MudCard Elevation="3">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Receiver Metrics</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudTable Items="@_metrics.ReceiverMetrics" Hover="true" Dense="true" Striped="true">
                        <HeaderContent>
                            <MudTh>Receiver</MudTh>
                            <MudTh>Pending</MudTh>
                            <MudTh>Success</MudTh>
                            <MudTh>Failed</MudTh>
                            <MudTh>Avg Delivery Time</MudTh>
                            <MudTh>Last Attempt</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Receiver">@context.ReceiverName</MudTd>
                            <MudTd DataLabel="Pending">
                                <MudChip Size="Size.Small" Color="Color.Warning" T="string">@context.PendingCount</MudChip>
                            </MudTd>
                            <MudTd DataLabel="Success">
                                <MudChip Size="Size.Small" Color="Color.Success" T="string">@context.SuccessCount</MudChip>
                            </MudTd>
                            <MudTd DataLabel="Failed">
                                <MudChip Size="Size.Small" Color="Color.Error" T="string">@context.FailedCount</MudChip>
                            </MudTd>
                            <MudTd DataLabel="Avg Delivery Time">
                                @if (context.AverageDeliveryTimeMs.HasValue)
                                {
                                    <text>@($"{context.AverageDeliveryTimeMs:F2} ms")</text>
                                }
                                else
                                {
                                    <text>N/A</text>
                                }
                            </MudTd>
                            <MudTd DataLabel="Last Attempt">
                                @if (context.LastAttemptAt.HasValue)
                                {
                                    <text>@context.LastAttemptAt.Value.ToLocalTime().ToString("g")</text>
                                }
                                else
                                {
                                    <text>Never</text>
                                }
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
}

@code {
    private MetricsDto? _metrics;
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadMetrics();
    }

    private async Task LoadMetrics()
    {
        _loading = true;
        try
        {
            _metrics = await MetricsApi.GetMetricsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading metrics: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }
}

